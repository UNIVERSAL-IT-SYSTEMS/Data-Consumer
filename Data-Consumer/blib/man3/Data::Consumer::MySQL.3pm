.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::Consumer::MySQL 3"
.TH Data::Consumer::MySQL 3 "2008-02-17" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Data::Consumer::MySQL \- Data::Consumer implementation for a mysql database table resource
.SH "VERSION"
.IX Header "VERSION"
Version 0.08
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Data::Consumer::MySQL;
.Ve
.PP
.Vb 10
\&    my $consumer = Data::Consumer::MySQL\->new(
\&        dbh => $dbh,
\&        table => 'T',
\&        id_field= > 'id',
\&        flag_field => 'done',
\&        unprocessed => 0,
\&        working => 1,
\&        processed => 2,
\&        failed => 3,
\&    );
.Ve
.PP
.Vb 4
\&    $consumer\->consume( sub {
\&        my $id = shift;
\&        print "processed $id\en";
\&    } );
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.Sh "\s-1CLASS\-\s0>new(%opts)"
.IX Subsection "CLASS->new(%opts)"
Constructor for a Data::Consumer::MySQL instance.
.PP
Options are as follows:
.IP "connect => \e@connect_args" 4
.IX Item "connect => @connect_args"
Will use \f(CW@connect_args\fR to connect to the database using
\&\f(CW\*(C`DBI\-\*(C'\fR\fIconnect()\fR>.  This argument is mandatory if the \f(CW\*(C`dbh\*(C'\fR argument is
not provided.
.ie n .IP "dbh => $dbh" 4
.el .IP "dbh => \f(CW$dbh\fR" 4
.IX Item "dbh => $dbh"
Use \f(CW$dbh\fR as the database connection object. If this argument is
provided then connect will be ignored.
.IP "table => 'some_table_name'" 4
.IX Item "table => 'some_table_name'"
Process records in the specified table.
.IP "id_field => 'id'" 4
.IX Item "id_field => 'id'"
The column name of the primary key of the table being processed
.IP "flag_field => 'process_state'" 4
.IX Item "flag_field => 'process_state'"
The column name in the table being processed which shows whether
an object is processed or not.
.IP "lock_prefix => 'my\-lock\-name'" 4
.IX Item "lock_prefix => 'my-lock-name'"
The prefix to use for the mysql locks. Defaults to \f(CW\*(C`$0\-$table\*(C'\fR.
.IP "unprocessed => 0" 4
.IX Item "unprocessed => 0"
The value of the \f(CW\*(C`flag_field\*(C'\fR which indicates that an item is not
processed. If not provided defaults to \f(CW0\fR.
.Sp
Optional.
.Sp
May also be a callback which is responsible for marking the item as
unprocessed.  This will be called with the arguments \f(CW\*(C`($consumer,
\&'unprocessed', $id, $dbh)\*(C'\fR
.IP "working => 1" 4
.IX Item "working => 1"
The value of the \f(CW\*(C`flag_field\*(C'\fR which indicates that an item is currently
being processed. If not provided defaults to \f(CW1\fR.
.Sp
Optional.
.Sp
May also be a callback which is responsible for marking the item as
working.  This will be called with the arguments \f(CW\*(C`($consumer,
\&'working', $id, $dfh)\*(C'\fR.
.IP "processed => 2" 4
.IX Item "processed => 2"
The value of the \f(CW\*(C`flag_field\*(C'\fR which indicates that an item has been
successfully processed. If not provided defaults to \f(CW2\fR.
.Sp
Optional.
.Sp
May also be a callback which is responsible for marking the item as processed.
This will be called with the arguments ($consumer,'processed',$id,$dfh)
.IP "failed => 3" 4
.IX Item "failed => 3"
The value of the \f(CW\*(C`flag_field\*(C'\fR which indicates that processing of an
item has failed. If not provided defaults to \f(CW3\fR.
.Sp
Optional.
.Sp
May also be a callback which is responsible for marking the item as
failed.  This will be called with the arguments \f(CW\*(C`($consumer, 'failed',
$id, $dfh)\*(C'\fR
.IP "init_id => 0" 4
.IX Item "init_id => 0"
The value which the first acquired record's \f(CW\*(C`id_field\*(C'\fR must be greater
than. Should be smaller than any legal id in the table. Defaults to \f(CW0\fR.
.IP "select_sql" 4
.IX Item "select_sql"
.PD 0
.IP "select_args" 4
.IX Item "select_args"
.PD
These arguments are optional, and will be synthesized from the other values if not provided.
.Sp
\&\s-1SQL\s0 select query which can be executed to acquire an item to be processed. Should
return a single record with a single column contain the id to be processed, at the
same time it should ensure that a lock on the id is created.
.Sp
The query will be executed with the arguments contained in select_args array, followed
by the id of the last processed item.
.IP "update_sql" 4
.IX Item "update_sql"
.PD 0
.IP "update_args" 4
.IX Item "update_args"
.PD
These arguments are optional, and will be synthesized from the other values if not provided.
.Sp
\&\s-1SQL\s0 update query which can be used to change the status the record being processed.
.Sp
Will be executed with the arguments provided in update_args followed the new status,
and the id.
.IP "release_sql" 4
.IX Item "release_sql"
.PD 0
.IP "release_args" 4
.IX Item "release_args"
.PD
These arguments are optional, and will be synthesized from the other values if not provided.
.Sp
\&\s-1SQL\s0 select query which can be used to clear the currently held lock.
.Sp
Will be called with the arguments provided in release_args, plust the id.
.Sh "$object\->\fIreset()\fP"
.IX Subsection "$object->reset()"
Reset the state of the object.
.Sh "$object\->\fIacquire()\fP"
.IX Subsection "$object->acquire()"
Aquire an item to be processed.
.PP
Returns an identifier to be used to identify the item acquired.
.Sh "$object\->\fIrelease()\fP"
.IX Subsection "$object->release()"
Release any locks on the currently held item.
.PP
Normally there is no need to call this directly.
.Sh "$object\->\fIdbh()\fP"
.IX Subsection "$object->dbh()"
returns the database handle the object is using to communicate to the db with.
.SH "AUTHOR"
.IX Header "AUTHOR"
Yves Orton, \f(CW\*(C`<YVES at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-data\-consumer at rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Data\-Consumer>.
.PP
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Igor Sutton for ideas, testing and support.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008 Yves Orton, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
